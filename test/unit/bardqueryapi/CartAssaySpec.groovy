package bardqueryapi

import grails.test.mixin.TestFor
import spock.lang.Specification
import spock.lang.Unroll

/**
 * See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions
 */
//@TestMixin(GrailsUnitTestMixin)
@TestFor(BardWebInterfaceController)
@Unroll
class CartAssaySpec extends Specification  {

    void setup() {
        // Setup logic here
    }

    void tearDown() {
        // Tear down logic here
    }

    void "test shopping cart assay element"() {
        when:
            CartAssay cartAssay = new CartAssay(assayTitle: "Assay title")
            assertNotNull(cartAssay)

        then:
            assert cartAssay.assayTitle=='Assay title'
            assertNull cartAssay.shoppingItem
    }

    /**
     * constraint test.  Note that the choice of ctor makes a difference in whether the setter is used
     */
    void "test constraints on CartAssay object"() {
        setup:
        mockForConstraintsTests(CartAssay)

        when:
        CartAssay cartAssay = new CartAssay( assayTitle, 47 as Long)
        cartAssay.validate()

        then:
        cartAssay.hasErrors() == !valid

        where:
        assayTitle      |   valid
        ""              |   false
        "Some assay"    |   true
        "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"  |  true
        "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345" |  false
    }


    // Note: In this case we are using a setter, and therefore we must NOT mockForConstraintsTests (otherwise
    // the setter will never be hit.
    void "test adding ellipses when the assay title is too long"() {
        when:
        CartAssay cartAssay = new CartAssay(assayTitle, 47 as Long)
        cartAssay.setAssayTitle(assayTitle)

        then:
        cartAssay.toString() == properName

        where:
        compoundId  |   assayTitle                 | properName
        47          |   "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"    | "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"
        47          |   "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"   |   "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"
        47          |   "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"  |   "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234..."
    }




}
